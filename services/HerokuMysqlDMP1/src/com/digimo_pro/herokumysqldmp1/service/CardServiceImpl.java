/*Copyright (c) 2017-2018 Breakout.MX All Rights Reserved.
 This software is the confidential and proprietary information of breakout.mx You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Breakout.MX*/
package com.digimo_pro.herokumysqldmp1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.digimo_pro.herokumysqldmp1.Card;


/**
 * ServiceImpl object for domain model class Card.
 *
 * @see Card
 */
@Service("HerokuMysqlDMP1.CardService")
public class CardServiceImpl implements CardService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CardServiceImpl.class);


    @Autowired
    @Qualifier("HerokuMysqlDMP1.CardDao")
    private WMGenericDao<Card, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Card, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "HerokuMysqlDMP1TransactionManager")
    @Override
	public Card create(Card card) {
        LOGGER.debug("Creating a new Card with information: {}", card);
        Card cardCreated = this.wmGenericDao.create(card);
        return cardCreated;
    }

	@Transactional(readOnly = true, value = "HerokuMysqlDMP1TransactionManager")
	@Override
	public Card getById(Integer cardId) throws EntityNotFoundException {
        LOGGER.debug("Finding Card by id: {}", cardId);
        Card card = this.wmGenericDao.findById(cardId);
        if (card == null){
            LOGGER.debug("No Card found with id: {}", cardId);
            throw new EntityNotFoundException(String.valueOf(cardId));
        }
        return card;
    }

    @Transactional(readOnly = true, value = "HerokuMysqlDMP1TransactionManager")
	@Override
	public Card findById(Integer cardId) {
        LOGGER.debug("Finding Card by id: {}", cardId);
        return this.wmGenericDao.findById(cardId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "HerokuMysqlDMP1TransactionManager")
	@Override
	public Card update(Card card) throws EntityNotFoundException {
        LOGGER.debug("Updating Card with information: {}", card);
        this.wmGenericDao.update(card);

        Integer cardId = card.getId();

        return this.wmGenericDao.findById(cardId);
    }

    @Transactional(value = "HerokuMysqlDMP1TransactionManager")
	@Override
	public Card delete(Integer cardId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Card with id: {}", cardId);
        Card deleted = this.wmGenericDao.findById(cardId);
        if (deleted == null) {
            LOGGER.debug("No Card found with id: {}", cardId);
            throw new EntityNotFoundException(String.valueOf(cardId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "HerokuMysqlDMP1TransactionManager")
	@Override
	public Page<Card> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Cards");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "HerokuMysqlDMP1TransactionManager")
    @Override
    public Page<Card> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Cards");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "HerokuMysqlDMP1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service HerokuMysqlDMP1 for table Card to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "HerokuMysqlDMP1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "HerokuMysqlDMP1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

