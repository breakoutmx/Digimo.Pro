/*Copyright (c) 2017-2018 Breakout.MX All Rights Reserved.
 This software is the confidential and proprietary information of breakout.mx You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Breakout.MX*/
package com.digimo_pro.herokumysqldmp1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.digimo_pro.herokumysqldmp1.Card;
import com.digimo_pro.herokumysqldmp1.Charge;


/**
 * ServiceImpl object for domain model class Charge.
 *
 * @see Charge
 */
@Service("HerokuMysqlDMP1.ChargeService")
public class ChargeServiceImpl implements ChargeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ChargeServiceImpl.class);

    @Autowired
	@Qualifier("HerokuMysqlDMP1.CardService")
	private CardService cardService;

    @Autowired
    @Qualifier("HerokuMysqlDMP1.ChargeDao")
    private WMGenericDao<Charge, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Charge, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "HerokuMysqlDMP1TransactionManager")
    @Override
	public Charge create(Charge charge) {
        LOGGER.debug("Creating a new Charge with information: {}", charge);
        Charge chargeCreated = this.wmGenericDao.create(charge);
        if(chargeCreated.getCards() != null) {
            for(Card card : chargeCreated.getCards()) {
                card.setCharge(chargeCreated);
                LOGGER.debug("Creating a new child Card with information: {}", card);
                cardService.create(card);
            }
        }
        return chargeCreated;
    }

	@Transactional(readOnly = true, value = "HerokuMysqlDMP1TransactionManager")
	@Override
	public Charge getById(Integer chargeId) throws EntityNotFoundException {
        LOGGER.debug("Finding Charge by id: {}", chargeId);
        Charge charge = this.wmGenericDao.findById(chargeId);
        if (charge == null){
            LOGGER.debug("No Charge found with id: {}", chargeId);
            throw new EntityNotFoundException(String.valueOf(chargeId));
        }
        return charge;
    }

    @Transactional(readOnly = true, value = "HerokuMysqlDMP1TransactionManager")
	@Override
	public Charge findById(Integer chargeId) {
        LOGGER.debug("Finding Charge by id: {}", chargeId);
        return this.wmGenericDao.findById(chargeId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "HerokuMysqlDMP1TransactionManager")
	@Override
	public Charge update(Charge charge) throws EntityNotFoundException {
        LOGGER.debug("Updating Charge with information: {}", charge);
        this.wmGenericDao.update(charge);

        Integer chargeId = charge.getId();

        return this.wmGenericDao.findById(chargeId);
    }

    @Transactional(value = "HerokuMysqlDMP1TransactionManager")
	@Override
	public Charge delete(Integer chargeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Charge with id: {}", chargeId);
        Charge deleted = this.wmGenericDao.findById(chargeId);
        if (deleted == null) {
            LOGGER.debug("No Charge found with id: {}", chargeId);
            throw new EntityNotFoundException(String.valueOf(chargeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "HerokuMysqlDMP1TransactionManager")
	@Override
	public Page<Charge> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Charges");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "HerokuMysqlDMP1TransactionManager")
    @Override
    public Page<Charge> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Charges");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "HerokuMysqlDMP1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service HerokuMysqlDMP1 for table Charge to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "HerokuMysqlDMP1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "HerokuMysqlDMP1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "HerokuMysqlDMP1TransactionManager")
    @Override
    public Page<Card> findAssociatedCards(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated cards");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("charge.id = '" + id + "'");

        return cardService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CardService instance
	 */
	protected void setCardService(CardService service) {
        this.cardService = service;
    }

}

