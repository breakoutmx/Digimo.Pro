/*Copyright (c) 2017-2018 Breakout.MX All Rights Reserved.
 This software is the confidential and proprietary information of breakout.mx You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Breakout.MX*/
package com.digimo_pro.herokumysqldmp1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.digimo_pro.herokumysqldmp1.Card;
import com.digimo_pro.herokumysqldmp1.Charge;

/**
 * Service object for domain model class {@link Charge}.
 */
public interface ChargeService {

    /**
     * Creates a new Charge. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Charge if any.
     *
     * @param charge Details of the Charge to be created; value cannot be null.
     * @return The newly created Charge.
     */
	Charge create(Charge charge);


	/**
	 * Returns Charge by given id if exists.
	 *
	 * @param chargeId The id of the Charge to get; value cannot be null.
	 * @return Charge associated with the given chargeId.
     * @throws EntityNotFoundException If no Charge is found.
	 */
	Charge getById(Integer chargeId) throws EntityNotFoundException;

    /**
	 * Find and return the Charge by given id if exists, returns null otherwise.
	 *
	 * @param chargeId The id of the Charge to get; value cannot be null.
	 * @return Charge associated with the given chargeId.
	 */
	Charge findById(Integer chargeId);


	/**
	 * Updates the details of an existing Charge. It replaces all fields of the existing Charge with the given charge.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Charge if any.
     *
	 * @param charge The details of the Charge to be updated; value cannot be null.
	 * @return The updated Charge.
	 * @throws EntityNotFoundException if no Charge is found with given input.
	 */
	Charge update(Charge charge) throws EntityNotFoundException;

    /**
	 * Deletes an existing Charge with the given id.
	 *
	 * @param chargeId The id of the Charge to be deleted; value cannot be null.
	 * @return The deleted Charge.
	 * @throws EntityNotFoundException if no Charge found with the given id.
	 */
	Charge delete(Integer chargeId) throws EntityNotFoundException;

	/**
	 * Find all Charges matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Charges.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Charge> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Charges matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Charges.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Charge> findAll(String query, Pageable pageable);

    /**
	 * Exports all Charges matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Charges in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Charge.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated cards for given Charge id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Card instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Card> findAssociatedCards(Integer id, Pageable pageable);

}

