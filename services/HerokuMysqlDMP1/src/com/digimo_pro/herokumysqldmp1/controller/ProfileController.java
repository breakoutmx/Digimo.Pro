/*Copyright (c) 2017-2018 Breakout.MX All Rights Reserved.
 This software is the confidential and proprietary information of breakout.mx You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Breakout.MX*/
package com.digimo_pro.herokumysqldmp1.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.digimo_pro.herokumysqldmp1.Card;
import com.digimo_pro.herokumysqldmp1.Profile;
import com.digimo_pro.herokumysqldmp1.service.ProfileService;


/**
 * Controller object for domain model class Profile.
 * @see Profile
 */
@RestController("HerokuMysqlDMP1.ProfileController")
@Api(value = "ProfileController", description = "Exposes APIs to work with Profile resource.")
@RequestMapping("/HerokuMysqlDMP1/Profile")
public class ProfileController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProfileController.class);

    @Autowired
	@Qualifier("HerokuMysqlDMP1.ProfileService")
	private ProfileService profileService;

	@ApiOperation(value = "Creates a new Profile instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Profile createProfile(@RequestBody Profile profile) {
		LOGGER.debug("Create Profile with information: {}" , profile);

		profile = profileService.create(profile);
		LOGGER.debug("Created Profile with information: {}" , profile);

	    return profile;
	}


    @ApiOperation(value = "Returns the Profile instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Profile getProfile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Profile with id: {}" , id);

        Profile foundProfile = profileService.getById(id);
        LOGGER.debug("Profile details with id: {}" , foundProfile);

        return foundProfile;
    }

    @ApiOperation(value = "Updates the Profile instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Profile editProfile(@PathVariable("id") Integer id, @RequestBody Profile profile) throws EntityNotFoundException {
        LOGGER.debug("Editing Profile with id: {}" , profile.getId());

        profile.setId(id);
        profile = profileService.update(profile);
        LOGGER.debug("Profile details with id: {}" , profile);

        return profile;
    }

    @ApiOperation(value = "Deletes the Profile instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteProfile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Profile with id: {}" , id);

        Profile deletedProfile = profileService.delete(id);

        return deletedProfile != null;
    }

    /**
     * @deprecated Use {@link #findProfiles(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Profile instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Profile> searchProfilesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Profiles list");
        return profileService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Profile instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Profile> findProfiles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Profiles list");
        return profileService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Profile instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Profile> filterProfiles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Profiles list");
        return profileService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportProfiles(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return profileService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Profile instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countProfiles( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Profiles");
		return profileService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getProfileAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return profileService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/cards", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the cards instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Card> findAssociatedCards(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated cards");
        return profileService.findAssociatedCards(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ProfileService instance
	 */
	protected void setProfileService(ProfileService service) {
		this.profileService = service;
	}

}

